package model

// DO NOT EDIT: generated by ./scripts/pack_sql.go

var packed = `
create table if not exists message (
  id integer not null primary key autoincrement,
  mailbox_id integer not null references mailbox(id) on delete cascade on update cascade,

  size integer not null default 0,

  seen integer not null default 0,
  recent integer not null default 0,
  answered integer not null default 0,
  flagged integer not null default 0,
  draft integer not null default 0,
  deleted integer not null default 0,

  created datetime not null,
  path text not null default ''
);

create index if not exists message_seen_index on message (seen);
create index if not exists message_answered_index on message (answered);
create index if not exists message_recent_index on message (recent);
create index if not exists message_flagged_index on message (flagged);
create index if not exists message_draft_index on message (draft);
create index if not exists message_deleted_index on message (deleted);

create table if not exists header (
  message_id integer not null references message(id) on delete cascade on update cascade,

  key text not null,
  value text not null
);

create index if not exists header_key_index on header (key);

create table if not exists flag (
  message_id integer not null references message(id) on delete cascade on update cascade,

  value text not null,

  primary key (message_id, value collate nocase)
);

create table if not exists mailbox (
  id integer not null primary key autoincrement,

  name text not null,

  unique (name collate nocase)
);

create trigger if not exists set_seen_index after insert on flag
for each row
when new.value = '\seen'
begin
  update message set seen = 1 where id = new.message_id;
end;

create trigger if not exists set_recent_index after insert on flag
for each row
when new.value = '\recent'
begin
  update message set recent = 1 where id = new.message_id;
end;

create trigger if not exists set_answered_index after insert on flag
for each row
when new.value = '\answered'
begin
  update message set answered = 1 where id = new.message_id;
end;

create trigger if not exists set_flagged_index after insert on flag
for each row
when new.value = '\flagged'
begin
  update message set flagged = 1 where id = new.message_id;
end;

create trigger if not exists set_draft_index after insert on flag
for each row
when new.value = '\draft'
begin
  update message set draft = 1 where id = new.message_id;
end;

create trigger if not exists set_deleted_index after insert on flag
for each row
when new.value = '\deleted'
begin
  update message set deleted = 1 where id = new.message_id;
end;

create trigger if not exists unset_seen_index after delete on flag
for each row
when old.value = '\seen'
begin
  update message set seen = 0 where id = old.message_id;
end;

create trigger if not exists unset_recent_index after delete on flag
for each row
when old.value = '\recent'
begin
  update message set recent = 0 where id = old.message_id;
end;

create trigger if not exists unset_answered_index after delete on flag
for each row
when old.value = '\answered'
begin
  update message set answered = 0 where id = old.message_id;
end;

create trigger if not exists unset_flagged_index after delete on flag
for each row
when old.value = '\flagged'
begin
  update message set flagged = 0 where id = old.message_id;
end;

create trigger if not exists unset_draft_index after delete on flag
for each row
when old.value = '\draft'
begin
  update message set draft = 0 where id = old.message_id;
end;

create trigger if not exists unset_deleted_index after delete on flag
for each row
when old.value = '\deleted'
begin
  update message set deleted = 0 where id = old.message_id;
end;

`
